{
  "hash": "790ebbad8e57b7c70809ff3be27eb6a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\nslug: \"metabolomics-analysis-with-brms\"\nformat:\n  html:\n    toc: false\n    html-math-method: katex\ncss: styles.css\nbibliography: references.bib\nhighlight-style: github\n---\n\n\n\n\n\n\n\n\n\n\n\n::: {#body style=\"width: 75%; margin: auto; font-weight: normal; text-align: center\"}\n\n\n\n\n\n\n\n\n\n\n```{=html}\n<a href=\"https://drive.google.com/file/d/1IrY3V-shDKvro7E07L0mvHEtNIoVsJpa/view?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <button type=\"button\" class=\"btn btn-outline-danger\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-printer\" viewBox=\"0 0 16 16\">\n      <path d=\"M2.5 8a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1\"></path>\n      <path d=\"M5 1a2 2 0 0 0-2 2v2H2a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h1v1a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-1h1a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-1V3a2 2 0 0 0-2-2zM4 3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2H4zm1     5a2 2 0 0 0-2 2v1H2a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-1v-1a2 2 0 0        0-2-2zm7 2v3a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1\"></path>\n    </svg>\n    printer-friendly version\n  </button>\n</a>\n```\n\n\n\n\n\n\n\n\n\n\n:::\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n### metabolomics analysis with `brms`\n\n\\<Grace write intro\\>\n:::\n\n#### Part 0: getting familiar with the data {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\nLet's make sure we are set up for success. Let's load into memory the two packages we need (`tidyverse` and `brms`) and the data. Please download the data using the button below and ensure that you are pointed to the proper working directory (hint: `setwd()`) before you load it.\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: center\"}\n\n\n\n\n\n\n\n\n\n\n```{=html}\n<a href=\"https://drive.google.com/file/d/10WWc06belyJhYWLgiQq7Vx_RG-lQEnni/view?usp=sharing\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <button type=\"button\" class=\"btn btn-outline-danger\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-download\" viewBox=\"0 0 16 16\">\n  <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5\"/>\n  <path d=\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z\"/>\n</svg>\n    download data\n  </button>\n</a>\n```\n\n\n\n\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# required packages\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(bayesplot)\n\n# data frame (assuming your data are in the folder called \"files\")\ndat <- read_csv(\"files/meineke-primary-metabolism-GCTOFMS.csv\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n### Wrangling into a readable format\n\nFirst, let's wrangle the data into a machine- and human-readable format. Pretty much, we want to take the metadata from the first few rows and add it back in the long format. Then, we want to scale the peak height variable so it is\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get dimensions of data\ndim(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 711  55\n```\n\n\n:::\n\n```{.r .cell-code}\n# look at the first couple of rows\n# the first 7 columns are blank until the column names\nhead(dat, n = 10L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 55\n   ...1         ...2   ...3  ...4  ...5  ...6  ...7  `file id` `220518bKCsa07_1`\n   <chr>        <chr>  <chr> <chr> <chr> <chr> <chr> <chr>     <chr>            \n 1 <NA>         <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  mx class  656732           \n 2 <NA>         <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  mx sample 220518bKCsa07_1  \n 3 <NA>         <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  label     10_005           \n 4 <NA>         <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  comment   10               \n 5 <NA>         <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  species   leaves           \n 6 <NA>         <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  organ     leaves           \n 7 <NA>         <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  treatment City - City      \n 8 BinBase name ret.i… quan… BB id mass… PubC… KEGG  InChI Key <NA>             \n 9 xylulose     553450 173   31632 85:1… 4392… C003… LQXVFWRQ… 1511             \n10 xylose       544100 103   1147… 85:8… 1351… C001… SRBFZHDQ… 7805             \n# ℹ 46 more variables: `220518bKCsa19_1` <chr>, `220518bKCsa37_1` <chr>,\n#   `220518bKCsa06_1` <chr>, `220518bKCsa20_1` <chr>, `220518bKCsa36_1` <chr>,\n#   `220518bKCsa12_2` <chr>, `220518bKCsa38_1` <chr>, `220518bKCsa24_1` <chr>,\n#   `220518bKCsa04_1` <chr>, `220518bKCsa32_1` <chr>, `220518bKCsa41_1` <chr>,\n#   `220518bKCsa40_1` <chr>, `220518bKCsa15_1` <chr>, `220518bKCsa05_1` <chr>,\n#   `220518bKCsa31_1` <chr>, `220518bKCsa22_1` <chr>, `220518bKCsa34_1` <chr>,\n#   `220518bKCsa18_1` <chr>, `220518bKCsa10_1` <chr>, …\n```\n\n\n:::\n\n```{.r .cell-code}\n# make an id row so we can match samples later\n# we are adding NAs for the blank columns for now\nvalues <- as.character(c(rep(NA, 7), \"id\", 1:47))\nid_row <- matrix(values, nrow = 1) %>% as.data.frame()\n\n# make the col names the same as the data\nnames(id_row) <- colnames(dat)\n\n# add the id row to the data frame\ndat <- dat %>% add_row(.before = 1, !!!id_row)\n\n# get the metadata (from the first 8 columns) and reformat\nmeta_dat <- dat[1:8, 8:55] # get data\nnames(meta_dat) <- as.vector(meta_dat[1,]) # rename\nmeta_dat <- meta_dat %>%\n  slice(-1) %>%\n  column_to_rownames(var = \"id\") %>%\n  t() %>% \n  as.data.frame() %>% \n  rowid_to_column(var = \"id\") %>%\n  mutate(treatment = str_remove(treatment, \"-.*$\"),\n         treatment = tolower(treatment),\n         id = as.character(id)) %>%\n  rename_with(~ str_replace_all(., \" \", \"_\"), contains(\" \"))\n  \n# get rid of metadata from the full df\ndat <- dat %>% slice(-(2:8))\n\n# get the correct col names\nreplacement_ids <- dat[1, ] %>% as.character()\nreplacement_names <- dat[2, ] %>% as.character()\n\n# make a vector of new names\nnew_names <- ifelse(str_detect(names(dat), \"\\\\.{3}|file id\"), replacement_names, replacement_ids)\n\n# rename columns\nnames(dat) <- new_names\n\n# reformat data and rename columns\ndat <- dat %>% slice(-(1:2)) %>%\n  pivot_longer(cols = \"1\":\"47\",\n               names_to = \"id\",\n               values_to = \"peak_height\") %>%\n  rename_with( ~ str_replace_all(., \"[. ]\", \"_\"), \n               matches(\"[. ]\")) %>%\n  rename(compound = BinBase_name, InChI = InChI_Key) %>%\n  full_join(., meta_dat, by = \"id\", keep = FALSE) %>%\n  select(mx_sample, everything(), peak_height, -id) \n\n# make sure data are of proper class\ndat <- dat %>%\n  mutate(peak_height = as.numeric(peak_height))\n\n# scale peak heights\ndat <- dat %>% \n  group_by(compound) %>%\n  mutate(peak_heightZ = scale(peak_height)) %>%\n  ungroup()\n\n# remove extra objects\nall_objects <- ls() # list all objects\n\n# remove all objects except the df\nrm(list = setdiff(all_objects, \"dat\"))\nrm(all_objects)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Initial data exploration\n\nHere, we will pick a random compound (or compounds) and look at the distribution of the data. This will give us an opportunity to familiarize ourselves with the shape and values in our dataset. Remember, we scaled the data, so the histograms we are going to generate are deviations from the mean rather than peak heights.\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set seed\nset.seed(7348923)\n\n# pick a random compound\npick <- sample(unique(dat$compound), 1)\n\n# make a histogram of the random compound\ndat %>%\n  filter(compound == pick) %>%\n  ggplot(aes(x = peak_heightZ)) + \n  geom_histogram(bins = 10)\n```\n\n::: {.cell-output-display}\n![](metabolomics-analysis-with-brms_files/figure-html/exploration-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n#### Part 1: pick an initial model {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\nPick 3 compounds to model the \"abundance\" (our scaled peak heights) by treatment. You can inspect the dataset using either `View(dat)` or `unique(dat$compound)`. We also want to group by compound. This makes the model hierarchical, nesting the effects of treatment within each compound.\n\nWhen you are actually modelling the data, you will use the entire dataset, but for our exploration we are working with a subset so that the model runs within the bounds of a class period.\n\nHint: the syntax for the formula is: `response ~ pterms + (1 | group)`\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter our dataset down to the 3 compounds and remove the \"pool\" treatment\ndat2 <- dat %>%\n  filter(treatment != \"pool\", compound == \"saccharic acid\" |\n           compound == \"kaempferol\" | compound == \"vanillic acid\")\n\n# write the model and store it as an object\ndefault_prior_mbrms <- brms::brm(\n  peak_heightZ ~ treatment + (1 | compound),\n  data = dat2,\n  family = gaussian(),\n  chains = 3,\n  iter = 3000,\n  warmup = 1000,\n  cores = 3\n)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n#### Part 2: prior predictive check {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n<text>\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# use default_prior() on the model object to look at the values\n# brms automatically gives to the model\ndefault_prior(default_prior_mbrms)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   prior     class                   coef    group resp dpar\n                  (flat)         b                                          \n                  (flat)         b treatmenthighpollution                   \n                  (flat)         b       treatmenthighway                   \n                  (flat)         b  treatmentlowpollution                   \n                  (flat)         b          treatmentpool                   \n                  (flat)         b         treatmentrural                   \n student_t(3, -0.2, 2.5) Intercept                                          \n    student_t(3, 0, 2.5)        sd                                          \n    student_t(3, 0, 2.5)        sd                        compound          \n    student_t(3, 0, 2.5)        sd              Intercept compound          \n    student_t(3, 0, 2.5)     sigma                                          \n nlpar lb ub       source\n                  default\n             (vectorized)\n             (vectorized)\n             (vectorized)\n             (vectorized)\n             (vectorized)\n                  default\n        0         default\n        0    (vectorized)\n        0    (vectorized)\n        0         default\n```\n\n\n:::\n\n```{.r .cell-code}\n# rerun the model with the arguement: sample_prior = \"only\"\n\ndefault_prior_check <- brms::brm(\n  peak_heightZ ~ treatment + (1 | compound),\n  data = dat2,\n  family = gaussian(),\n  chains = 3,\n  iter = 3000,\n  warmup = 1000,\n  cores = 3,\n  sample_prior = \"only\"\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Sampling from priors is not possible as some parameters have no proper priors. Error occurred for parameter 'b'.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\nDid you get an error? That's because the betas (b) have totally flat priors. You can think of that as the uniform distribution below where all outcomes are equally likely (improper prior).\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a data frame with x values for plotting\nx_values <- seq(from = 0, to = 4, length.out = 100)\ndata <- data.frame(x = x_values)\n\n# create the plot\nggplot(data, aes(x)) +\n  stat_function(fun = dunif, args = list(min = 0, max = 4)) +\n  ylim(0, 1)\n```\n\n::: {.cell-output-display}\n![](metabolomics-analysis-with-brms_files/figure-html/unif-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n#### Part 3: modify the model {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n<text about how we are changing the model and then rerun the prior predictive check>\n\nBecause models with horseshoe priors are more likely than other models to have divergent transitions, we need to increase `adapt_delta` which will slow the sampler but should decrease the number of divergent transitions.\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write the modified model and sample the prior *only*\nhorseshoe_prior_check <- brm(\n  data = dat2,\n  family = gaussian,\n  peak_heightZ ~ treatment + (1 + treatment | compound),\n  prior = c(\n    prior(normal(0, 1), class = Intercept),\n    prior(\"horseshoe(3)\", class = b), \n    prior(exponential(1), class = sd),\n    prior(exponential(1), class = sigma)\n  ),\n  iter = 2000,\n  warmup = 1000,\n  chains = 3,\n  cores = 3,\n  sample_prior = \"only\"\n)\n\n# prior predictive check\npp_check(horseshoe_prior_check)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n#### Part 4: fit the model {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run the modified model\nhorseshoe_prior_mbrms <- brm(\n  data = dat2,\n  family = gaussian,\n  peak_heightZ ~ treatment + (1 + treatment | compound),\n  prior = c(\n    prior(normal(0, 1), class = Intercept),\n    prior(\"horseshoe(3)\", class = b), \n    prior(exponential(1), class = sd),\n    prior(exponential(1), class = sigma)\n  ),\n  iter = 2000,\n  warmup = 1000,\n  chains = 3,\n  cores = 3\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCompiling Stan program...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTrying to compile a simple C file\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nusing C compiler: ‘Apple clang version 15.0.0 (clang-1500.3.9.4)’\nusing SDK: ‘MacOSX14.4.sdk’\nclang -arch arm64 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Users/gracehorne/Library/R/arm64/4.4/library/Rcpp/include/\"  -I\"/Users/gracehorne/Library/R/arm64/4.4/library/RcppEigen/include/\"  -I\"/Users/gracehorne/Library/R/arm64/4.4/library/RcppEigen/include/unsupported\"  -I\"/Users/gracehorne/Library/R/arm64/4.4/library/BH/include\" -I\"/Users/gracehorne/Library/R/arm64/4.4/library/StanHeaders/include/src/\"  -I\"/Users/gracehorne/Library/R/arm64/4.4/library/StanHeaders/include/\"  -I\"/Users/gracehorne/Library/R/arm64/4.4/library/RcppParallel/include/\"  -I\"/Users/gracehorne/Library/R/arm64/4.4/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/Users/gracehorne/Library/R/arm64/4.4/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/opt/R/arm64/include    -fPIC  -falign-functions=64 -Wall -g -O2  -c foo.c -o foo.o\nIn file included from <built-in>:1:\nIn file included from /Users/gracehorne/Library/R/arm64/4.4/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp:22:\nIn file included from /Users/gracehorne/Library/R/arm64/4.4/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Users/gracehorne/Library/R/arm64/4.4/library/RcppEigen/include/Eigen/Core:19:\n/Users/gracehorne/Library/R/arm64/4.4/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:679:10: fatal error: 'cmath' file not found\n#include <cmath>\n         ^~~~~~~\n1 error generated.\nmake: *** [foo.o] Error 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStart sampling\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 3 divergent transitions after warmup. See\nhttps://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup\nto find out why this is a problem and how to eliminate them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Examine the pairs() plot to diagnose sampling problems\n```\n\n\n:::\n\n```{.r .cell-code}\n# get the stats\ncoef(horseshoe_prior_mbrms)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$compound\n, , Intercept\n\n                   Estimate Est.Error       Q2.5     Q97.5\nkaempferol      0.004588458 0.1426425 -0.2726568 0.3025087\nsaccharic acid  0.020755326 0.1487281 -0.2607016 0.3226474\nvanillic acid  -0.036796999 0.1573251 -0.3610275 0.2698693\n\n, , treatmenthighpollution\n\n                  Estimate Est.Error       Q2.5     Q97.5\nkaempferol      0.01270065 0.2119322 -0.4272259 0.4580600\nsaccharic acid  0.14355073 0.2466807 -0.2730471 0.7371949\nvanillic acid  -0.02074919 0.2378982 -0.5350825 0.4656884\n\n, , treatmenthighway\n\n                   Estimate Est.Error       Q2.5     Q97.5\nkaempferol     -0.007478984 0.2274892 -0.4755780 0.4798898\nsaccharic acid  0.093680147 0.2490233 -0.3797785 0.6587649\nvanillic acid  -0.229665669 0.2801556 -0.8648843 0.2104319\n\n, , treatmentlowpollution\n\n                  Estimate Est.Error       Q2.5     Q97.5\nkaempferol     -0.01354197 0.2069538 -0.4514980 0.4107297\nsaccharic acid -0.10721044 0.2376890 -0.6715355 0.3125030\nvanillic acid  -0.03656352 0.2239383 -0.5262962 0.4185214\n\n, , treatmentpool\n\n                 Estimate Est.Error        Q2.5     Q97.5\nkaempferol      0.1510733 0.4282079 -0.69893393 1.0259892\nsaccharic acid -0.5827861 0.4661391 -1.50507353 0.3009077\nvanillic acid   1.2633713 0.5643529  0.09796665 2.3351627\n\n, , treatmentrural\n\n                  Estimate Est.Error       Q2.5     Q97.5\nkaempferol     -0.09676045 0.2203226 -0.6211980 0.3010464\nsaccharic acid -0.07468879 0.2253237 -0.5905028 0.3502682\nvanillic acid   0.01131759 0.2357427 -0.4721188 0.5151764\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n#### Part 5: validate computation {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npp_check(horseshoe_prior_mbrms)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing 10 posterior draws for ppc type 'dens_overlay' by default.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](metabolomics-analysis-with-brms_files/figure-html/model checks-1.png){width=672}\n:::\n\n```{.r .cell-code}\npp_check(horseshoe_prior_mbrms, plotfun = \"boxplot\", nreps = 10, notch = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing 10 posterior draws for ppc type 'dens_overlay' by default.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The following arguments were unrecognized and ignored: plotfun, nreps,\nnotch\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](metabolomics-analysis-with-brms_files/figure-html/model checks-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n#### Part 6: addressing computation issues {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n\\<This part will be text only based on Gelman et al. 2020\\>\n:::\n\n#### Part 7: evaluate the model {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n### Posterior predictive check\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n### Influence of the prior\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n\n\n:::\n\n#### Part 8: model is provisionally accepted (!!!) {style=\"text-align: center\"}\n\n::: {style=\"width: 75%; margin: auto; font-weight: normal; text-align: left\"}\n### Plotting the model\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n### Glossary\n\n\\<term\\>\n\n:   def\n:::\n",
    "supporting": [
      "metabolomics-analysis-with-brms_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}